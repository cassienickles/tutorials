{"title":"Harmony Concise + L2SS-Py Demo","markdown":{"headingText":"Harmony Concise + L2SS-Py Demo","containsRefs":false,"markdown":"\n\n## What is Concise?\nConcise is a Harmony service developed by PODAAC that allows users to concatenate multiple L2 granules together into a single granule. This concatenation is done by adding a new `subset_index` dimension to the resulting granule.\n\n## What is L2SS-Py + Concise?\nHarmony supports chaining multiple services together. The L2SS-Py + Concise chain allows users to combine spatial, temporal, and variable subsetting with granule concatenation.\n\n\n## Before you start\n\nBefore you beginning this tutorial, make sure you have an account in the Earthdata Login, which is required to access data from the NASA Earthdata system. Please visit https://urs.earthdata.nasa.gov to register for an Earthdata Login account. It is free to create and only takes a moment to set up.\n\nYou will also need a netrc file containing your NASA Earthdata Login credentials in order to execute this notebook. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: [Authentication for NASA Earthdata](https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/04_NASA_Earthdata_Authentication.html#authentication-via-netrc-file).\n\n## Running the Demo\n\nThe remaining notebook walks through constructing a request that first subsets multiple files from a collection and then concatenates the results together into a single output file. This is accomplished using the [Harmony](https://harmony.earthdata.nasa.gov/) coverages API through the use of the [harmony-py](https://github.com/nasa/harmony-py) python library.\n\nThe collection being used in the demonstration is the [ASCATB-L2-25km](https://podaac.jpl.nasa.gov/dataset/ASCATB-L2-25km?ids=&values=&search=C2075141559-POCLOUD&provider=POCLOUD) collection which contains operational near-real-time Level 2 ocean surface wind vector retrievals from the Advanced Scatterometer (ASCAT) on MetOp-B at 25 km sampling resolution.\n\nThe first step is to import the libraries needed to run the demo.\n\nCreate Harmony-py client.\n\nWith the client created, we can contruct and validate the request. As this is a subsetting + concatenation request, we specify options on the request that define spatial bounds, variables we are interested in, temporal bounds, and indicated the result should be concatenated. Since this is a near real time dataset, we will request the data from yesterday.\n\nNow that we have a valid request we simply need to call the `submit` function using the client we created earlier and pass in the request as a parameter.\n\n_Tip:_ if you want to see the request before submitting it, use the `request_as_curl` function on the client to get an equivalent curl command for the request that will be submitted.\n\nAfter submitting the request it is possible to retrieve the current processing status by using the job ID returned from the submission.\n\nIf the request is still running, we can wait until the Harmony request has finished processing. This cell will wait until the request has finised.\n\nNow that the request has completed we can inspect the results using [xarray](https://xarray.pydata.org/en/stable/) and [matplotlib](https://matplotlib.org/).\n\nFirst, let's download the result into a temporary directory\n\nWith the output file downloaded, now we can open concatenated granule using xarray to inspect some of the metadata. \n\nNotice the variable subset has been successfully executed -- only `wind_dir` and `wind_speed` vars are present. In addition, there is a new dimension `subset_index` added to each variable in the dataset. The index of this dimension corresponds to the original file named in the `subset_files` variable that contained the data at that index.\n\nUsing matplotlib, we can genearte a plot for each granule that makes up this concatenated granule. Plot `wind_speed` for each granule using `subset_index` dimension.\n\nPlot `wind_speed` for all data in this concatenated granule on a single map. Notice that the data is within the spatial bounds we provided earlier.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../include-files.lua","quarto"],"toc":true,"output-file":"Harmony_Subsetting_Concatenation.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","theme":{"light":"cosmo","dark":"darkly"},"code-copy":true},"extensions":{"book":{"multiFile":true}}}}}