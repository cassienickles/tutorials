{"title":"SWORD River Demo","markdown":{"headingText":"SWORD River Demo","containsRefs":false,"markdown":"\n\nThis Jupyter Notebook contains examples related to querying river reaches (segments) using the SWOT River Database (SWORD) and visualizing results and then querying related datasets for the identified spatial extent through NASA's Common Metadata Repository (CMR) search.\n\nExample Use Case: In this example, we geospatially search a single river reach, multiple reaches, and river nodes within the database. We then use geospatial coordinates of the features (here river reaches/node along the Kasai River, a tributary of the Congo River in Africa) to query against a dataset in CMR, namely Pre SWOT Hydrology.\n\n*Note: PO.DAAC is in the process of publishing SWOT sample data to the POCLOUD archive (expected June 2022). Once this is complete, the example below will be updated to work with this sample data as well. SWOT is expected to launch Nov 2022.* \n\n**Resources**\n- SWOT River Database (SWORD) data can be found here: https://zenodo.org/record/4917236#.YTKLPd9lCST\n- Other SWOT SWORD documentation can be found here: https://swot.jpl.nasa.gov/documents/4031/\n- MEaSUREs - Pre-Surface Water and Ocean Topography (Pre-SWOT) Hydrology data can be found here: https://podaac.jpl.nasa.gov/MEaSUREs-Pre-SWOT?sections=data\n\n### Compute Environment Requirements\nThis notebook can be run either locally or in AWS cloud (`us-west-2` region). The dataset we are querying against is in the PO.DAAC cloud archive (POCLOUD) located in the NASA Earthdata Cloud hosted in AWS.\n\n### Required Dependencies\n\nThere are three python dependencies that must be available to the python kernel running this notebook. \n\n- plotly (https://pypi.org/project/plotly/)\n- kaleido (https://pypi.org/project/kaleido/)\n- geojson (https://pypi.org/project/geojson/)\n\nThe next cell installs them when the cell is run.\n\nFirst, we **define a function to query a single reach, multiple reaches, or river nodes**. This function returns the properties of river reaches including name, length, coordinates as well as individual node properties.\n\nWe **define another function to calculate the center coordinates of features**. This function returns the center of a single reach or multiple reaches. \n\n# Plot a Single River Reach\n\nIn this section, we query the Feature Translation Service (FTS) SWORD service using a single Reach ID (from SWORD). In this example, we use the river Reach ID `13227000061`. This ID represents a specific reach along the Kasai River, a tributary of the Congo River in Africa. \n\n### How to identify the SWORD ID for the river of interest?\n1. Download the SWORD database from https://zenodo.org/record/5643392#.YpfUJ6jMJPY\n2. Open in a GIS tool such as QGIS or ArcGIS\n3. Find the codes for your feature of interest (river reach, node) to use here. \n\nNow we can plot this reach and calculate the center of the reach so that we can visualize the reach properly.\n\nThe below cell plots the river reach using an interactive map. You can zoom out to see where the reach is located.\n\nNote that we haven't looked at any data from a collection yet, we've simmply found the geospatila coordinates of our river reach of interest. \n\n# Plot Multiple River Reaches\n\nIn this section, we query the FTS SWORD service over multiple river reaches. In this example, we use ID `132270000`. This ID represents multiple reaches along the Kasai River, a tributary of the Congo River in Africa. Note that this reach includes the reach ID of `13227000061` we plotted earlier. The response includes 9 individual reaches.\n\nNow we can plot these multiple reaches and calculate  the center of the features.\n\nThe below cell plots the river reaches using an interactive map. You can zoom out to see where these reaches are located.\n\n# Plot River Nodes\n\nIn this section, we query the FTS SWORD service for river nodes. In this example, we use the ID of  `13227000060`. Note that this ID corresponds to the same reach ID `13227000061` we used earlier. The only difference is that the last digit of `0` corresponds to all the individual *nodes* along the reach. If the last digit is `1` in the reach ID, it corresponds to the overall properties of the *reach* itself. The response returns 52 nodes along the reach.\n\nNow we can plot the river nodes and calculate the center of the nodes.\n\n## Query CMR by Coordinates\n\nWe can use results obtained from the FTS query to then directly and automatically query data using CMR. We will use the coordinate information of a single reach to search for granules (files) available through the [Pre SWOT Hydrology GRRATS Daily River Heights](https://podaac.jpl.nasa.gov/dataset/PRESWOT_HYDRO_GRRATS_L2_DAILY_VIRTUAL_STATION_HEIGHTS_V2) and Storage Version 2 data, which has the collection ID `C2036882359-POCLOUD`. \n\nWe query FTS using the previously used reach ID of `13227000061` over Kasai River, a tributary of the Congo River in Africa.\n\nThe next cell queries CMR using the coordinates of the reach. Note that coordinates should be listed in the format lon1, lat1, lon2, lat2, lon3, lat3, and so on. The CMR json response proivides a link to the data file (granule) from the Pre SWOT Hydroology GRRATS Daily River Heights data collection that overlaps the geospatial search from FTS-SWORD for the river reaches of interest, e.g. `\n \"href\": \"https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/PRESWOT_HYDRO_GRRATS_L2_DAILY_VIRTUAL_STATION_HEIGHTS_V2/Africa_Congo1kmdaily.nc\"`\n\nFrom all that was printed out above, we want to hone in specifically on the granule file from the Pre-SWOT MEaSUREs dataset that gives us the data over our desired region.\n\nIf we want to direct download to our local machine, we want the link with the title `Download Africa_Congo1kmdaily.nc`. If we want to directly access this granule in the cloud, we want the link entitled, `This link provides direct download access via S3 to the granule`. Here, we access the netCDF file links and print them out respectively. From here, you're ready to access the data either locally or via cloud direct access!\n\nIt should be noted that the links are not always in the same order across datasets (collections), and thus referencing other datasets with the '[0]' and '[1]' indexes may not work for the download and s3 links respectively. For direct download, the link should always start with \"https://archive.podaac.earthdata.nasa.gov/podaac-ops-cumulus-protected/\", and for direct cloud access to PO.DAAC data, the link should start with \"s3://podaac-ops-cumulus-protected/\" no matter the dataset.\n\n(Note: the cell above just prints the links of interest for either downloading the file, or accessing from the cloud. It didn't yet download or access the data. That would be your next step.)\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../include-files.lua","quarto"],"toc":true,"output-file":"SWORD_River_Demo.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","theme":{"light":["cosmo","theme.scss"],"dark":["cosmo","theme-dark.scss"]},"code-copy":true},"extensions":{"book":{"multiFile":true}}}}}