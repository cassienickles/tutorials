{"title":"Sentinel-6 MF L2 Altimetry: OPeNDAP Access and Gridding","markdown":{"headingText":"Sentinel-6 MF L2 Altimetry: OPeNDAP Access and Gridding","containsRefs":false,"markdown":"\n\nIn this tutorial you will learn how to access variable subsets from OPeNDAP in the Cloud.\n\n## Requirements\n\nThis workflow was developed using Python 3.9 (and tested against versions 3.7, 3.8). The [`pyresample`](https://pyresample.readthedocs.io/en/latest/installation.html) package is the only remaining dependency besides common packages like `numpy` and `xarray`. You may uncomment the first line of the following cell to install *pyresample*, if necessary. Then, import all the required Python packages.\n\n## Dataset\n\n### About the mission\n\nThis demo uses data acquired by the Sentinel-6A Michael Freilich (S6A) satellite altimetry mission, which provides precise measurements of ocean surface height. It is the latest iteration in a series of missions, which together provide an uninterupted sea surface height record going back more than 30 years.\n\nSatellite altimetry is a precise science carried out by [Ocean Surface Topography](#Ocean-Surface-Topography) researchers through the Jason-series radar altimetry missions. Instrument specifications, operational procedures, data calibration and analysis are sometimes referred to colloquially as \"along-track altimetry\" (a term that I find useful to understanding the data provided at level 2, like in the dataset we use here).\n\nLearn more through resources linked in the [Appendix]([#Sentinel-6A-MF)).\n\n### About the data\n\nIn a nutshell:\n\n* **What?** calibrated sea surface height measurements,\n* **Where?** from -66.0 to 66.0 degrees latitude, \n* **When?** beginning in June 2021,\n* **How?** global coverage acquired every 10 days (1 cycle of 128 orbits)\n\n\n<img src=\"https://podaac.jpl.nasa.gov/Podaac/thumbnails/JASON_CS_S6A_L2_ALT_LR_RED_OST_NRT_F.jpg\" width=\"80%\">\n\n<i>Figure: depicted data structure for level-2 along-track altimetry datasets from Sentinel-6A</i>\n\nPO.DAAC typically refers to datasets by their *ShortName*: ***JASON_CS_S6A_L2_ALT_LR_RED_OST_NRT_F***. The *ShortName* contains the following info for all Sentinel-6 datasets at level 2: \n\n* **JASON_CS:** referring to Jason Continuity of Service (Jason-CS), the mission series/instrument class;\n* **S6A:** referring to Sentinel-6A (instead of Sentinel-6B, which is expected to launch in 2025);\n* **L2:** Level 2, the data processing level;\n* **ALT:** Altimetry, the data product type and application;\n* **LR:** Low Resolution, versus High Resolution (HR);\n* **RED:** Reduced, the smaller of two datasets distributed at Level 2 (the other being *Standard*, which contains more variables)\n* **OST:** Ocean Surface Topography, the science domain/team/community;\n* **NRT:** Near Real Time, the data latency; i.e. accessible within 3 hours (vs. STC or NTC; lower latencies)\n\n## Discovery\n\nThe unique 'concept-id' assigned to each PO.DAAC dataset, or 'collection', within the Earthdata system is functionally the same as the ShortName in the context of PO.DAAC's collections in the cloud (because we also assign unique ShortNames). This cell is downloading metadata to retrieve that identifier from an external source, then download metadata about the series of files that make up the time series for the cycle specified by the variable 'cycle', and merging to table. \n\n### Search for files/granules\n\nPick any cycle after cycle 25, which was around the time of the first release of data from S6A. (This cell calls three functions defined in the cell above.)\n\n## Access\n\nThese functions have nothing to do with Earthdata or PO.DAAC services, all Python 3 standard library except for tqdm and wget:\n\n### Explore dataset variables\n\nThe S6A level 2 altimetry datasets include variables for sea surface height anomaly (SSHA), significant wave height (SWH), wind speed, others.\n\n### Get subsets from OPeNDAP\n\nPrepare the full request urls by adding a comma-delimited list of variables, after the question mark `?`.\n\nThe function(s) below download granules from a remote `source` to a local `target` file, and reliably manage simultaneous streaming downloads divided between multiple threads.\n\n**Why this way?**\n\nTo be explained...\n\n**Will it scale?**\n\nThe source netcdf files range from 2500KB to 3000KB per file. The OPeNDAP subsets that we just downloaded are around 100KB a pop. It took less than 10 minutes to download the same subsets for ~1700 files, that covers a period of roughly  You can extrapolate to a reasonable estimate for time series of any length (even the whole mission).\n\nTotal size of the source data is ~4.25GB, based on:\n\n```\n2500KB x 1700 = 4250000KB (4250 megabytes)\n```\n\nversus, total size of the subset time series:\n\n```\n100KB  x 1700 =  17000KB  (170 megabytes)\n```\n\nPlot it to put this in context, because our goal is to produce one global grid for the entire cycle of data that we just downloaded.\n\n### Open, plot ssh time series\n\nSort the list of subset files to ensure they concatenate in proper order. Call `open_mfdataset` on the list to open all the subsets in memory as one dataset in xarray.\n\nTwo prerequisites to plot based on personal preference:\n\n1. rename all the variables to drop the group names (because I just think they're too long as is)\n2. get a tuple with two timestamps for the start and end of the time series coverage for the cycle\n\nPlot the cycle as a series on a geographic plot, which should look just like the one at the top of this notebook:\n\n## Process\n\n### 0.5-degree grid from ECCO V4r4 (int)\n\n>*Acknowledgement: [*pyresample*](https://pyresample.readthedocs.io/en/latest/api/pyresample) approach shared by Ian Fenty, NASA JPL/ECCO.*\n\nECCO V4r4 products are distributed in two spatial formats. One set of collections provides the ocean state estimates on the native model grid (LLC0090) and the other provides them after interpolating to a regular grid defined in geographic coordinates with horizontal cell size of 0.5-degrees. The latitude/longitude grid is distributed as its own collection in one netcdf file: https://search.earthdata.nasa.gov/search/granules?p=C2013583732-POCLOUD\n\nDownload the ECCO grid geometry netcdf from its https download endpoint in NASA Earthdata Cloud. Open the file and print the header content for the `maskC` variable, which contains a boolean mask representing the wet/dry state of the area contained in each cell of a 3d grid with dimensions mapped to `Z`, `latitude`, and `longitude`.\n\n### Get ssha variable on 0.5-degree grid\n\nResample *ssha* data using kd-tree gaussian weighting neighbour approach. Define a function that implements the following steps:\n\n1. Generate two 2d arrays of lats/lons using the permuted 1d coordinates from an input gridded dataset.\n2. Define the target grid geometry using the 2d arrays of lats/lons.\n3. Define the source grid geometry using the 1d arrays of lats/lons from an input dataset.\n\nSet the gridding parameters in the python dictionary below; then pass it to the function as the last of three required positional arguments (the first two are the source dataset and the dataset that provides the target grid geometry).\n\n### Plot gridded ssha, gridding statistics\n\nPlot each array for the output 'grid' and the grid statistics 'stddev' and 'counts'.\n\nLook at this plot and adjust gridding parameters as needed to refine ssha grid.\n\na guess: the yellow areas with lower counts correspond to pass positions at the start/end of the cycle.\n\n## Appendix\n\n### Sentinel-6A MF\n\nThe Sentinel-6A Michael Freilich radar altimeter mission, or Sentinel-6, produces high-precision measurements of global sea-level. You can learn about the mission and ocean altimetry applications and datasets through the following links:\n\n* https://www.nasa.gov/sentinel-6\n* https://sealevel.jpl.nasa.gov/missions/jasoncs/\n* https://sentinel-6.cnes.fr/en/JASON-CS/index.htm\n* https://podaac.jpl.nasa.gov/Sentinel-6\n\n### Ocean Surface Topography\n\nThe primary contribution of satellite altimetry to satellite oceanography has been to:\n\n* Improve the knowledge of ocean tides and develop global tide models.\n* Monitor the variation of global mean sea level and its relationship to changes in ocean mass and heat content.\n* Map the general circulation variability of the ocean, including the ocean mesoscale, over decades and in near real-time using multi-satellite altimetric sampling.\n\n![altimetry](https://podaac.jpl.nasa.gov/sites/default/files/content/PO.DAAC_SAT_Timeline_high_res.jpg)\n\nThe Surface Water Ocean Topography (SWOT) mission represents the next-generation of sea surface height observation. It will bring together oceanography and hydrology to focus on gaining a better understanding of the world's oceans and its terrestrial surface waters. U.S. and French oceanographers and hydrologists have joined forces to develop this new space mission to make the first global survey of Earth's surface water, observe the fine details of the ocean's surface topography and measure how water bodies change over time. The payload on SWOT will include a Jason-class radar altimeter that will serve to extend the time series of sea surface height data into the future, beyond the lifespan of Sentinel-6 MF, which is introduced immediately below. Read more about SWOT at: https://podaac.jpl.nasa.gov/SWOT/    \n\n### Earthdata Cloud Services Overview\n\nThis workflow example downloads subsets of the netcdf datasets via OPeNDAP for massive efficiency gains (network/compute).\n\n**Access for direct download:**\n\n* Browse and download granules through Earthdata Search -- https://search.earthdata.nasa.gov/search/granules?p=C1968980576-POCLOUD\n* Browse and download granules from HTTPS endpoints -- https://cmr.earthdata.nasa.gov/virtual-directory/collections/C1968980576-POCLOUD\n* Browse and download granules from S3 endpoints (example forthcoming, assuming s3 direct access has been enabled for the collection)\n\n**Access through data services:**\n\nData and metadata are also accessible in reduced forms through higher-level cloud data services, for example:\n\n* https://harmony.earthdata.nasa.gov/ -- Data reduction via on-demand subsetting and other high-level reformatting\n    * Interface to backend services such as data file format conversion, subsetting at L2+, regridding and reprojection at L3+, and more.\n    * Compatibility depends on the data processing level and data/file format, and so their expected behavior vary also.\n    * Services available through Harmony API reduce the technical burden on users by covering certain low-level data transformations that a user would normally have to apply themselves, even to simply subset a dataset from OPeNDAP.\n* https://opendap.earthdata.nasa.gov/ -- Data reduction via basic subsetting along coordinate dimensions and by variable \n    * Requires more familiarity with the contents of the target dataset, as well knowledge of how to select for data along the dimensions which correspond to space/time coordinates fitting the geographic and temporal coverage of interest.\n    * User Guide: https://opendap.github.io/documentation/UserGuideComprehensive.html\n\n### Python API References\n\n* *Bash*\n    * https://www.gnu.org/software/coreutils/manual/html_node/du-invocation.html\n* *Python*\n    * https://docs.python.org/3/library/functions.html#map    \n    * https://docs.python.org/3/library/functions.html#zip\n    * https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor\n* *numpy* (https://numpy.org/doc/stable/reference)    \n    * [numpy.ndarray.data](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.data.html)      \n    * [numpy.where](https://numpy.org/doc/stable/reference/generated/numpy.where.html)    \n    * [numpy.isnan](https://numpy.org/doc/stable/reference/generated/numpy.isnan.html)    \n    * [datetimes](https://numpy.org/doc/stable/reference/arrays.datetime.html)    \n    * [numpy.sum](https://numpy.org/doc/stable/reference/generated/numpy.sum.html)    \n    * [numpy.nansum](https://numpy.org/doc/stable/reference/generated/numpy.nansum.html)    \n* *xarray* (https://xarray.pydata.org/en/stable)    \n    * [xarray.DataArray](https://xarray.pydata.org/en/stable/generated/xarray.DataArray.html)    \n    * [xarray.DataArray.values](https://xarray.pydata.org/en/stable/generated/xarray.DataArray.values.html)    \n    * [xarray.DataArray.mean](https://xarray.pydata.org/en/stable/generated/xarray.DataArray.mean.html)    \n    * [xarray.DataArray.isel](https://xarray.pydata.org/en/stable/generated/xarray.DataArray.isel.html)\n    * [xarray.open_dataset](https://xarray.pydata.org/en/stable/generated/xarray.open_dataset.html)\n    * [xarray.DataArray.plot](https://xarray.pydata.org/en/stable/generated/xarray.DataArray.plot.html)\n    * [xarray.Dataset.rename](https://xarray.pydata.org/en/stable/generated/xarray.Dataset.rename.html)\n* *pyresample*\n    * [pyresample.geometry.SwathDefinition](https://pyresample.readthedocs.io/en/latest/api/pyresample.html#pyresample.geometry.SwathDefinition)\n    * [pyresample.kd_tree.resample_gauss](https://pyresample.readthedocs.io/en/latest/api/pyresample.html#pyresample.kd_tree.resample_gauss)\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../../include-files.lua","quarto"],"toc":true,"output-file":"S6_OPeNDAP_Access_Gridding.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","theme":{"light":"cosmo","dark":"darkly"},"code-copy":true},"extensions":{"book":{"multiFile":true}}}}}