{"title":"Access Sentinel-6 Data by Cycle and Pass Number","markdown":{"headingText":"Access Sentinel-6 Data by Cycle and Pass Number","containsRefs":false,"markdown":"\n<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Before-you-start\" data-toc-modified-id=\"Before-you-start-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Before you start</a></span></li><li><span><a href=\"#Authentication-setup\" data-toc-modified-id=\"Authentication-setup-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Authentication setup</a></span></li><li><span><a href=\"#Find-granules-by-cycle/pass-number\" data-toc-modified-id=\"Find-granules-by-cycle/pass-number-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Find granules by cycle/pass number</a></span></li></ul></div>\n\n\nThis notebook shows a simple way to search for Sentinel-6 data granules for a specific cycle and pass using the [CMR Search API](https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html) and download them to a local directory.\n\n## Before you start\n\nBefore you beginning this tutorial, make sure you have an Earthdata account [https://urs.earthdata.nasa.gov](https://urs.earthdata.nasa.gov).\n\nAccounts are free to create and take just a moment to set up.\n\n## Authentication setup\n\n*You'll probably need to use the netrc method when running from command line.* \n\nWe need some boilerplate up front to log in to Earthdata Login.  The function below will allow Python\nscripts to log into any Earthdata Login application programmatically.  To avoid being prompted for\ncredentials every time you run and also allow clients such as curl to log in, you can add the following\nto a `.netrc` (`_netrc` on Windows) file in your home directory:\n\n```\nmachine urs.earthdata.nasa.gov\n    login <your username>\n    password <your password>\n```\n\nMake sure that this file is only readable by the current user or you will receive an error stating\n\"netrc access too permissive.\"\n\n`$ chmod 0600 ~/.netrc` \n\n\n## Find granules by cycle/pass number\n\nThe CMR Search API provides for searching ingested granules by their cycle and pass numbers. A third parameter, the `tile` identifier, is provisioned for use during the upcoming SWOT mission but isn't used by CMR Search at this time. Read more about these orbit identifiers [here](#). \n\nPasses within a cycle are unique, there will be no repeats until the next cycle. Tile numbers are only unique within a pass, so if you're looking only at tile numbers there will be over 300 per cycle, but only 1 per pass.\n\n*Info below may only apply to NRT use case:*\n\n>This workflow/notebook can be run routinely to maintain a time series of NRT data, downloading new granules as they become available in CMR. \n>\n>The notebook writes/overwrites a file `.update` to the target data directory with each successful run. The file tracks to date and time of the most recent update to the time series of NRT granules using a timestamp in the format `yyyy-mm-ddThh:mm:ssZ`. \n>\n>The timestamp matches the value used for the [`created_at`](https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html#g-created-at) parameter in the last successful run. This parameter finds the granules created within a range of datetimes. This workflow leverages the `created_at` parameter to search backwards in time for new granules ingested between the time of our timestamp and now.\n\nThe variables in the cell below determine the workflow behavior on its initial run:\n\n* `trackcycle` and `trackpass`: Set the cycle and pass numbers to use for the CMR granule search.\n* `cmr`: The domain of the target CMR instance, either `cmr.earthdata.nasa.gov` or `cmr.uat.earthdata.nasa.gov`.\n* `ccid`: The unique CMR `concept-id` of the desired collection.\n* `data`: The path to a local directory in which to download/maintain a copy of the NRT granule time series.\n\nThe variable `data` is pointed at a nearby folder [`resources/cyclepass`](resources/cyclepass/) by default. **You should change `data` to a suitable download path on your file system.** An unlucky sequence of git commands could disappear that folder and its downloads, if your not careful. Just change it.\n\n**The search retrieves granules ingested during the last `n` minutes.** A file in your local data dir  file that tracks updates to your data directory, if one file exists. The CMR Search falls back on the ten minute window if not.\n\nThis cell will replace the timestamp above with the one read from the `.update` file in the data directory, if it exists.\n\nThere are several ways to query for CMR updates that occured during a given timeframe. Read on in the CMR Search documentation:\n\n* https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html#c-with-new-granules (Collections)\n* https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html#c-with-revised-granules (Collections)\n* https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html#g-production-date (Granules)\n* https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html#g-created-at (Granules)\n\nThe `created_at` parameter works for our purposes. It's a granule search parameter that returns the records ingested since the input timestamp.\n\nGet the query parameters as a string and then the complete search url:\n\nDownload the granule records that match our search parameters.\n\nNeatly print the first granule's data for reference (assuming at least one was returned).\n\nThe link for http access denoted by `\"Type\": \"GET DATA\"` in the list of `RelatedUrls`.\n\nGrab the download URL, but do it in a way that'll work for search results returning any number of granule records:\n\nFinish by downloading the files to the data directory in a loop. Overwrite `.update` with a new timestamp on success.\n\nIf there were updates to the local time series during this run and no exceptions were raised during the download loop, then overwrite the timestamp file that tracks updates to the data folder (`resources/nrt/.update`):\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../include-files.lua","quarto"],"toc":true,"output-file":"Access_Sentinel6_By_CyclePass.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","theme":{"light":["cosmo","theme.scss"],"dark":["cosmo","theme-dark.scss"]},"code-copy":true},"extensions":{"book":{"multiFile":true}}}}}