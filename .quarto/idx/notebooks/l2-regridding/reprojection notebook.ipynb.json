{"title":"Harmony API Introduction","markdown":{"headingText":"Harmony API Introduction","containsRefs":false,"markdown":"\n\nThis notebook provides an overview of the capabilities offered through the Harmony API and SWOT L2 Reproject tool. While written for SWOT L2 data, it works with most any level 2 data for projecting to a normal grid. In this tutorial we will use MODIS L2 data to show the native file projected to equal-area-cylindracal projection using both Nearest Neighbor and Bi-linear interpolation.\n\nStanding on the shoulders of previous authors: Amy Steiker, Patrick Quinn\n\n## Before you start\n\nBefore you beginning this tutorial, make sure you have an account in the Earthdata Login, which is required to access data from the NASA Earthdata system. Please visit https://urs.earthdata.nasa.gov to register for an Earthdata Login account. It is free to create and only takes a moment to set up.\n\nYou will also need a netrc file containing your NASA Earthdata Login credentials in order to execute this notebook. A netrc file can be created manually within text editor and saved to your home directory. For additional information see: [Authentication for NASA Earthdata](https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/04_NASA_Earthdata_Authentication.html#authentication-via-netrc-file).\n\n## Import packages\n\n## Identify a data collection of interest\n\nA CMR collection ID is needed to request services through Harmony. The collection ID can be determined using the [CMR API](https://cmr.earthdata.nasa.gov/search/site/docs/search/api.html). We will query the corresponding ID of a known collection short name, `MODIS_A-JPL-L2P-v2019.0`.\n\nWe can also view the `MODIS_A-JPL-L2P-v2019.0` collection metadata to glean more information about the collection:\n\nNext we get a granule ID from this collection, G2525170359-POCLOUD.\n\n## Access reprojected data\n\nThe Harmony API accepts reprojection requests with a given coordinate reference system using the `outputCrs` keyword. According to the Harmony API documentation, this keyword \"recognizes CRS types that can be inferred by gdal, including EPSG codes, Proj4 strings, and OGC URLs (http://www.opengis.net/def/crs/...) \". \n\n## The practice datasets below used for this tutorial are no longer supported, for details about the Harmony API see [this tutorial](https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/07_Harmony_Subsetting.html#data-subsetting-and-transformation-services-in-the-cloud) from the 2021 Cloud Hackathon or [this tutorial](https://github.com/nasa/harmony-py/blob/main/examples/intro_tutorial.ipynb) introducing the Harmony-py library.\nTwo examples below demonstrate inputting an EPSG code and Proj4 string using the global test granule from previous examples. First, let's view the projection information of the granule in the native projection, using the variable subset example:\n\n## Access Level 2 swath regridded data\n\nMoving outside of the `harmony/gdal` service, we will now request regridding from the `sds/swot-reproject` service using the `C1940473819-POCLOUD`. \n\n\nThe Harmony API accepts several query parameters related to regridding and interpolation in addition to the reprojection parameters above: \n\n`interpolation=<String>` - Both `near` and `bilinear` are valid options\n\n`scaleSize=x,y` - 2 comma separated numbers as floats\n\n`scaleExtent=xmin,ymin,xmax,ymax` - 4 comma separated numbers as floats\n\n`width=<Float>`  \n\n`height=<Float>` \n\nAn error is returned if both `scaleSize` and `width`/`height` parameters are both provided (only one or the other can be used).\n\nRequest reprojection to [Europe Lambert Conformal Conic](https://epsg.io/102014) with a new scale extent and nearest neighbor interpolation:\n\nThis reprojected and regridded output is downloaded to the Harmony outputs directory and we can inspect a variable to check for projection and grid dimension:\n\nPrint the x and y dimensions to confirm that the output matches the requested scale extent in meters:\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../include-files.lua","quarto"],"toc":true,"output-file":"reprojection notebook.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.251","theme":{"light":["cosmo","theme.scss"],"dark":["cosmo","theme-dark.scss"]},"code-copy":true},"extensions":{"book":{"multiFile":true}}}}}